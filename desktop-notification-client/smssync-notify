#!/usr/bin/env python3

import sys
import time
import json
import os
import notify2
import argparse
import mosquitto

notify2.init("smssync")
uri = os.path.abspath(os.path.curdir) + "/harbour-smssync-mini.png"

###

def msg(payload):
    n = notify2.Notification(
        "{0}: {1} ({2})".format(
            "received from" if payload.get('dir') == 'in' else 'sent to',
            payload.get('contact', {}).get('name'),
            payload.get('contact', {}).get('phoneNumber')
        ),
        "\n" + payload.get('content'),
        uri
    )

    n.set_timeout(20000)
    n.show ()


###

def on_connect(mosq, userdata, rc):
    if rc != 0:
        print("connection failed:", rc)

def on_message(obj, userdata, msg):
    # smssync/jollahq/notify {"content": "Grec","dir": "in","from": "+336XXXXXXXXXX","id": "","type": "msg"}
    payload = json.loads(msg.payload.decode('utf8'))
    #print(msg.topic + "," + msg.payload.decode('utf8') + "," + payload.get('type'))

    if payload.get('type') in globals():
        (globals()[payload.get('type')])(payload)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Smssync notification client')
    parser.add_argument('--server', metavar='server', type=str, default='localhost',
                       help='MQTT server')
    parser.add_argument('--port'  , metavar='port', type=int, default=1883,
                       help='MQTT port')
    parser.add_argument('--ssl', action='store_true',
                       help='connect using SSL protocol')
    parser.add_argument('--cacert', metavar='cacert', type=str,
                       help='SSL CA certificate')
    args = parser.parse_args()
    if args.ssl and args.cacert is None:
        print("--cacert parameter is required when SSL mode activated"); sys.exit(1)

    client = mosquitto.Mosquitto("desktop")

    client.on_message = on_message
    client.on_connect = on_connect


    while True:
        try:
            client.connect(args.server, args.port, 60, True)
            # TLS configuration
            if args.ssl:
                client.tls_insecure_set(True) # disable server hostname verification
                client.tls_set(ca_certs=args.cacert, tls_version=3)

            client.subscribe("smssync/#", qos=2)

            while True:
                ret = client.loop()
                if ret > 0:
                    print("err:", mosquitto.error_string(ret))
                    break

        except Exception as e:
            print(e)

        time.sleep(.5)

